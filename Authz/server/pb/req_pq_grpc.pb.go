// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: req_pq.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReqPqServiceClient is the client API for ReqPqService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReqPqServiceClient interface {
	RequestPq(ctx context.Context, in *RequestPqRequest, opts ...grpc.CallOption) (*RequestPqResponse, error)
}

type reqPqServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReqPqServiceClient(cc grpc.ClientConnInterface) ReqPqServiceClient {
	return &reqPqServiceClient{cc}
}

func (c *reqPqServiceClient) RequestPq(ctx context.Context, in *RequestPqRequest, opts ...grpc.CallOption) (*RequestPqResponse, error) {
	out := new(RequestPqResponse)
	err := c.cc.Invoke(ctx, "/req_pq.ReqPqService/RequestPq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReqPqServiceServer is the server API for ReqPqService service.
// All implementations must embed UnimplementedReqPqServiceServer
// for forward compatibility
type ReqPqServiceServer interface {
	RequestPq(context.Context, *RequestPqRequest) (*RequestPqResponse, error)
	mustEmbedUnimplementedReqPqServiceServer()
}

// UnimplementedReqPqServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReqPqServiceServer struct {
}

func (UnimplementedReqPqServiceServer) RequestPq(context.Context, *RequestPqRequest) (*RequestPqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPq not implemented")
}
func (UnimplementedReqPqServiceServer) mustEmbedUnimplementedReqPqServiceServer() {}

// UnsafeReqPqServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReqPqServiceServer will
// result in compilation errors.
type UnsafeReqPqServiceServer interface {
	mustEmbedUnimplementedReqPqServiceServer()
}

func RegisterReqPqServiceServer(s grpc.ServiceRegistrar, srv ReqPqServiceServer) {
	s.RegisterService(&ReqPqService_ServiceDesc, srv)
}

func _ReqPqService_RequestPq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqPqServiceServer).RequestPq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/req_pq.ReqPqService/RequestPq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqPqServiceServer).RequestPq(ctx, req.(*RequestPqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReqPqService_ServiceDesc is the grpc.ServiceDesc for ReqPqService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReqPqService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "req_pq.ReqPqService",
	HandlerType: (*ReqPqServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestPq",
			Handler:    _ReqPqService_RequestPq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "req_pq.proto",
}
